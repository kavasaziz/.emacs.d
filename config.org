* Prewords
#+BEGIN_SRC emacs-lisp
;;; Personal configuration -*- lexical-binding: t -*-
;; Save the contents of this file under ~/.emacs.d/init.el
;; Do not forget to use Emacs' built-in help system:
;; Use C-h C-h to get an overview of all help commands.  All you
;; need to know about Emacs (what commands exist, what functions do,
;; what variables specify), the help system can provide.

;; Load a custom theme
(load-theme 'misterioso t)

;; Set default font face
(set-face-attribute 'default nil :font "14")

;; Disable the tool bar
(tool-bar-mode -1)

;; Disable the scroll bars
(scroll-bar-mode -1)

;; Disable splash screen
(setq inhibit-startup-screen t)

;; 
(setq-default display-line-numbers 'relative)

;; Disable annoying bell sound
(setq ring-bell-function 'ignore)

;; Disable annoying cursor blink
(blink-cursor-mode 0)

#+END_SRC

#+RESULTS:

* Package Manager
** Initialize package sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
                         ;; ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
#+END_SRC

** Install `straight.el'
#+BEGIN_SRC emacs-lisp
;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

* Completion framework
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'vertico)
  (package-install 'vertico))

;; Enable completion by narrowing
(vertico-mode t)

;; Improve directory navigation
(with-eval-after-load 'vertico
  (define-key vertico-map (kbd "RET") #'vertico-directory-enter)
  (define-key vertico-map (kbd "DEL") #'vertico-directory-delete-word)
  (define-key vertico-map (kbd "M-d") #'vertico-directory-delete-char))

#+END_SRC

* Extended completion utilities
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'consult)
  (package-install 'consult))
(global-set-key [rebind switch-to-buffer] #'consult-buffer)
(global-set-key (kbd "C-c j") #'consult-line)
(global-set-key (kbd "C-c i") #'consult-imenu)
(setq read-buffer-completion-ignore-case t
      read-file-name-completion-ignore-case t
      completion-ignore-case t)

;; Enable line numbering in `prog-mode'
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Automatically pair parentheses
(electric-pair-mode t)
#+END_SRC

* LSP Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'eglot)
  (package-install 'eglot))

;; Enable LSP support by default in programming buffers
(add-hook 'prog-mode-hook #'eglot-ensure)
#+END_SRC

* Inline static analysis
#+BEGIN_SRC emacs-lisp
;; Enabled inline static analysis
(add-hook 'prog-mode-hook #'flymake-mode)

;; Message navigation bindings
(with-eval-after-load 'flymake
  (define-key flymake-mode-map (kbd "C-c n") #'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "C-c p") #'flymake-goto-prev-error))
#+END_SRC

* Pop-up auto-completion
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'company)
  (package-install 'company))

;; Enable Company by default in programming buffers
(add-hook 'prog-mode-hook #'company-mode)
#+END_SRC

* Git client
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'magit)
  (package-install 'magit))

;; Bind the `magit-status' command to a convenient key.
(global-set-key (kbd "C-c g") #'magit-status)

;; Show word-granularity differences within diff hunks
(setq magit-diff-refine-hunk t)
#+END_SRC

* Indication of local VCS changes
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'diff-hl)
    (package-install 'diff-hl))

  ;; Enable `diff-hl' support by default in programming buffers
  (add-hook 'prog-mode-hook #'diff-hl-mode)
#+END_SRC

* Go Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'go-mode)
  (package-install 'go-mode))
#+END_SRC

* JSON Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'json-mode)
  (package-install 'json-mode))
#+END_SRC
* Lua Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'lua-mode)
  (package-install 'lua-mode))

#+END_SRC
* Rust Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'rust-mode)
  (package-install 'rust-mode))

#+END_SRC
* Typescript Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'typescript-mode)
  (package-install 'typescript-mode))

#+END_SRC
* YAML Support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'yaml-mode)
  (package-install 'yaml-mode))
#+END_SRC

* Markdown support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))
#+END_SRC

* Outline-based notes management and organizer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
#+END_SRC

* Additional Org-mode related functionality
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'org-contrib)
  (package-install 'org-contrib))
#+END_SRC
* EditorConfig support
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'editorconfig)
  (package-install 'editorconfig))

;; Enable EditorConfig
(editorconfig-mode t)
#+END_SRC

* Jump to arbitrary positions
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'avy)
  (package-install 'avy))
(global-set-key (kbd "C-c z") #'avy-goto-word-1)
#+END_SRC

* Vim Emulation
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'evil)
  (package-install 'evil))
#+END_SRC

* Miscellaneous options
#+BEGIN_SRC emacs-lisp
(setq-default major-mode
              (lambda () ; guess major mode from file name
                (unless buffer-file-name
                  (let ((buffer-file-name (buffer-name)))
                    (set-auto-mode)))))
(setq confirm-kill-emacs #'yes-or-no-p)
(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)
(save-place-mode t)
(savehist-mode t)
(recentf-mode t)
(defalias 'yes-or-no #'y-or-n-p)

;; Store automatic customisation options elsewhere
(setq custom-file (locate-user-emacs-file "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
